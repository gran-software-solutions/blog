"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/01/18/what-is-unit-testing","metadata":{"permalink":"/blog/2023/01/18/what-is-unit-testing","editUrl":"https://github.com/gran-software-solutions/blog/tree/main/blog/2023-01-18-what-is-unit-testing/index.mdx","source":"@site/blog/2023-01-18-what-is-unit-testing/index.mdx","title":"What is Unit testing","description":"I\'ll give a brief overview of the concept of unit testing for those of you who are unfamiliar with the subject.","date":"2023-01-18T00:00:00.000Z","formattedDate":"January 18, 2023","tags":[{"label":"testing","permalink":"/blog/tags/testing"}],"readingTime":3.735,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","title":"Senior engineer @ GRAN Software Solutions GmbH","url":"https://github.com/dodalovicgran","imageURL":"https://github.com/dodalovicgran.png","key":"dodalovicgran"}],"frontMatter":{"title":"What is Unit testing","authors":"dodalovicgran","tags":["testing"]},"nextItem":{"title":"Yes, companies in the automobile industry can (and should) undergo a digital transformation","permalink":"/blog/2023/01/17/automotive-industry-digitalization"}},"content":"I\'ll give a brief overview of the concept of unit testing for those of you who are unfamiliar with the subject.\\n\\n\x3c!--truncate--\x3e\\n\\nUnit testing allows us to test code behavior **in isolation** so that we can **verify implementation correctness**. Unit tests, unlike some other tests, need to be able to execute very quickly, providing you with an almost instant answer to the question, \\"Does my code work as expected?\u201d On top of that, they should be isolated from any external processes, like file-system access or calling databases or web services, during their execution.\\n\\n## Anatomy of Unit tests\\n\\nIn general, we should plan our test method implementation to be divided into three parts, as shown below:\\n\\n![Example banner](./img1.png)\\n\\nLet\u2019s now explain each of these three phases.\\n\\n## Arrange phase\\n\\nIn this phase we \\"emulate\\" execution environment of the code under test. What does that mean? Let\'s use a code snippet of the function we want to unit test:\\n\\n```kotlin\\nclass ProductService(\\n    val shippingCostService: ShippingCostService,\\n    val taxCalculationService: TaxCalculationService,\\n    val productPriceService: PriceService) {\\n\\n    fun getPrice(productID: String): Long {\\n        val basePrice: Long = priceService.getPrice(productID)\\n        val shippingCosts: Long = shippingCostService.getShippingCosts(productID)\\n        val taxes: Long = taxCalculationService.calculateTax(productID)\\n        return basePrice + shippingCosts + taxes\\n   }\\n}\\n```\\n\\nHere we have imaginary **ProductService** with **getPrice** method, which we\'d like to test. Unfortunately - there are already some complications: this method can\'t be tested in isolation!\\nWhy? Simply because our class depends on other classes to fulfill it\'s responsibility: `ShippingCostService`, `TaxCalculationService` and `PriceService`. We can call them **collaborators**.\\n\\nLuckily, all modern programming languages support some kind of support for emulation (you can hear the term **\u201cmocking\u201d**) of our collaborators. Using these tools, we can give **instructions to our test engine to mimic their particular behavior (as per the instructions we provide) during test method execution**.\\n\\n![Example banner](./img2.png)\\n\\nIn our imaginary case - we could give such an instruction:\\n\\n```kotlin\\nclass TestClass {\\n    @Test\\n    fun getPrice_when_shipping_cost_service_returns_proper_number_returns_positive_number() {\\n        // arrange phase\\n        val productID = UUID.randomUUID().toString()\\n        when(priceService.getPrice(productID)).thenReturn(5L)\\n        ...\\n    }\\n}\\n```\\n\\n## Act phase\\n\\n![Example banner](./img3.png)\\n\\nIn this phase, we actually execute the functionality under test. The example below shows how we execute the `getPrice` method of the `productService`.\\n\\n```kotlin\\nclass ProductServiceTest {\\n    @Test\\n    fun myTestMethod() {\\n        // act phase\\n        val calculatedPrice = productService.getPrice(\\"XY-123\\")\\n        // assert phase\\n        ...\\n    }\\n}\\n```\\n\\nUsually, after calling the function we\'re testing, we have to determine whether our function is correct or not. In our case,\\nthe function **returns some value**, which we can inspect and **make a conclusion about whether the value is expected or not**. Also,\\neven in the case that the function we test returns no value, the **test context might have changed as a result of interaction**,\\nand we could inspect these context changes to verify our function\'s correctness.\\n\\n## Assert phase\\n\\n![Example banner](./img4.png)\\n\\nNow after the function we want to test got executed, we need to verify for correctness.\\n\\nIn this phase, we typically do the following things:\\n\\n* verify return value from the function we tested, for instance:\\n  ```kotlin\\n  val calculatedPrice = productService.getPrice(\\"XY-123\\")\\n  // verify starts here\\n  assertThat(calculatedPrice).isEqualTo(5)\\n    ```\\n* verify that we had proper interactions with our collaborators during our test execution, for instance:\\n  ```kotlin\\n  verify(taxCalculationService, times(1)).calculateTax(productID)\\n    ```\\n\\n## Naming test methods\\n\\nConsistency is key, someone said. Our brains feel more comfortable when they recognize patterns with ease. Let\u2019s dissect the pattern I use when writing my test methods:\\n\\n![Example banner](./img5.png)\\n\\nIt consists of three parts, delimited by `_`:\\n\\n* the first part is **the method name we test**\\n\\n* the middle part is **the short description of the function execution context**\\n\\n* the last portion describes **expected outcome**\\n\\nHere are some more examples illustrating this:\\n\\n```kotlin\\n@Test\\nfun getUserDetails_whenDatabaseDown_throwsException() {}\\n@Test\\nfun getNumberOfRegisteredUsers_whenNetworkError_returnsNull() {}\\n```\\n\\n:::tip Key takeaways\\n* We need to know **what is the function we want to test** and more precisely, **which scenario** we are testing\\n\\n* Each test method should be composed out of three code blocks - **Arrange**, **Act**, and **Assert**\\n\\n  * **Arrange** - establish an environment needed to execute the test method\\n  * **Act** - invoke your test method\\n  * **Assert** - verify that the returned value from the method and/or the execution environment is in the state expected\\n\\n* We should name our test methods so that it\'s enough to understand the test just be reading test method name\\n:::\\n\\n## Conclusion\\n\\nWriting automated unit tests is important. If you think you learned something new, feel free to spread the word by sharing this article to your friends"},{"id":"/2023/01/17/automotive-industry-digitalization","metadata":{"permalink":"/blog/2023/01/17/automotive-industry-digitalization","editUrl":"https://github.com/gran-software-solutions/blog/tree/main/blog/2023-01-17-automotive-industry-digitalization/index.mdx","source":"@site/blog/2023-01-17-automotive-industry-digitalization/index.mdx","title":"Yes, companies in the automobile industry can (and should) undergo a digital transformation","description":"I am excited to share that I was part of a successful digital transformation project in the automotive industry.","date":"2023-01-17T00:00:00.000Z","formattedDate":"January 17, 2023","tags":[{"label":"business","permalink":"/blog/tags/business"}],"readingTime":16.35,"hasTruncateMarker":true,"authors":[{"name":"Dusan Odalovic","title":"Senior engineer @ GRAN Software Solutions GmbH","url":"https://github.com/dodalovicgran","imageURL":"https://github.com/dodalovicgran.png","key":"dodalovicgran"}],"frontMatter":{"title":"Yes, companies in the automobile industry can (and should) undergo a digital transformation","authors":"dodalovicgran","tags":["business"]},"prevItem":{"title":"What is Unit testing","permalink":"/blog/2023/01/18/what-is-unit-testing"},"nextItem":{"title":"POC and MVP - What Is The Difference","permalink":"/blog/2023/01/15/poc-and-mvp-what-is-the-difference"}},"content":"I am excited to share that I was part of a successful digital transformation project in the automotive industry.\\nThis project involved implementing new technologies and processes to streamline operations and improve overall efficiency.\\n\x3c!--truncate--\x3e\\nThe results were impressive, with significant cost savings and increased productivity. By sharing own experience and knowledge in this blog post, you can gain valuable insights on how to apply similar strategies in your own industries and achieve similar success in you own digital transformation initiatives.\\n\\nWhether you\'re in automotive or any other field, the principles and approach can be adapted to fit your particular case.\\n\\n## What were the challenges we were facing?\\n\\n![Challenges](./img1.png)\\n\\nThere was an initial understanding of what had to be done.\\n\\nIt\'s common for businesses to have a general idea of the software product they want to develop, but not all the details worked out yet. This is completely normal and expected. In fact, it\'s often better to start with a \\"half-baked\\" idea and let it evolve and take shape during the development process.\\n\\nThe development process can act as a discovery phase where the idea is shaped, features are added or removed, and the final product is refined to meet the specific needs of the business and its customers. This allows for a more flexible approach and the ability to adapt to changing market conditions or customer feedback. It\'s important to remember that the software development process is iterative, and the idea will likely evolve and change over time. Businesses should be open to this process and be prepared to adjust their original vision as needed. This approach ultimately leads to a more polished and successful end product.\\n\\nApproximately in June 2021, when there was only a broad knowledge of what needed to be done, I joined the project. The project began with the following team in place: I had a senior backend engineer role, another senior devops consultant was already on the team when I joined, and representing the client was a product owner.\\n\\nLet\'s delve deeper into the challenges we faced once the project began.\\n\\n## Integration with an inexperienced internal engineering team\\n\\nCollaborating with an engineering team that lacked experience building modern software systems presented a number of difficulties. One major issue was that the team was unfamiliar with the latest development methodologies, tools, and technologies. This lead to delays and inefficiencies in the development process, as well as a lack of scalability and maintainability in the final product.\\n\\nAnother challenge was that the team lacked the necessary skills to design and implement complex systems. This can result in poor system architecture, which leads to issues with performance, security, and reliability. Additionally, the team didn\u2019t have any experience troubleshooting and debugging problems that arise during development, which can further slow down the process.\\n\\nTo mitigate these difficulties, it was necessary to provide additional training and support to the team (often in the form of pair programming, collaborative coding sessions, etc.), as well as to establish clear communication and collaboration processes. My role on the project was exactly that - to provide guidance and mentorship to the team.\\n\\n## Absence of any project management techiques / tooling\\n\\n![Desert](./img2.png)\\n\\nProject management is an essential part of software development. It involves planning, organizing, and overseeing the development process to ensure that the project is completed on time, within budget, and to the satisfaction of the stakeholders. Without proper project management methodologies and tools, software development projects can suffer from a variety of negative impacts.\\n\\nWhat are the risks of not having any project management strategy when joining a project?\\n\\nOne of the most significant negative impacts of not having project management methodologies and tools is **poor communication**. Without these tools, it can be difficult to keep track of project progress, assign tasks, and communicate with team members. This can lead to **delays, misunderstandings, and confusion**.\\n\\nAnother negative impact is the **lack of organization**. Without project management methodologies and tools, it can be difficult to **keep track of project timelines, budgets, and resources**. This can lead to **delays, cost overruns, and a lack of accountability**.\\n\\nIn addition, without project management methodologies and tools, it can be difficult **to identify and manage risks**. This can lead to unexpected issues and delays, and can also lead to higher costs.\\n\\nFinally, without project management methodologies and tools, it can be difficult to ensure that the project is meeting the needs of the stakeholders. This can lead to **dissatisfaction** and, ultimately, **the failure of the project**.\\n\\n## No consensus about the way of working and common core values\\n\\nWhen a team is working on a software development project, it\'s important for everyone to be on the same page about how the work will be done and what values are important to the team. Without consensus, things can quickly become chaotic and inefficient.\\n\\nOne of the biggest problems with not having a consensus is that team members may have different ideas about how the work should be done. This can lead to confusion and delays as team members try to figure out what they are supposed to be doing. It can also lead to frustration as team members feel that their ideas are not being heard or respected.\\n\\nAnother problem with not having a consensus is that team members may have different ideas about what is important in the project. This can lead to unmet expectations as team members may feel that their priorities are not being considered. It can also lead to disappointment, as team members may feel that the project is not meeting their expectations.\\n\\nFinally, not having a consensus can lead to decreased satisfaction among team members. When team members feel that their ideas and values are not being respected, they may become disengaged and demotivated. This can lead to a lack of commitment to the project and a decrease in overall team performance.\\n\\n## Cumbersome tooling available\\n\\n![Bad tooling](./img3.png)\\n\\nInadequate tooling can have a significant impact on software development speed and communication effectiveness. When tools like self-hosted Rocket Chat or Jira (which were a must-have) are unstable or offline, it can disrupt the flow of work and impede collaboration among team members. Developers may be unable to access important information or communicate with their colleagues, leading to delays and confusion. Additionally, when tooling is unreliable, it can erode trust and morale among team members, further hampering productivity.\\n\\nTo ensure that software development is efficient and effective, it\'s essential to have robust and reliable tools in place that can support the needs of the team. This may include using cloud-based solutions or outsourcing the hosting and maintenance of these tools to a third-party provider.\\n\\n## Not invented here syndrome\\n\\n\\nFollowing \\"not invented here\\" practices can lead to less effective processes, higher maintenance costs, and opportunity costs. These practices involve rejecting or avoiding ideas or solutions that were developed externally, instead opting to develop similar solutions internally.\\n\\nInternal solutions may require significant resources to maintain and update, leading to higher costs over time.\\n\\nAt the start of the project, I suggested that we switch from our self-hosted Rocket Chat tool to Slack or a similar program, and abandon our slow, problematic self-hosted Jira installation; this suggestion was not well received by the team.\\n\\n## Getting access / credentials for anything takes from weeks to months\\n\\n![Turtle](./img4.png)\\n\\nBureaucratic processes can have a significant negative impact on software development teams.\\n\\nThese processes often require extensive (and often outdated) documentation to be read and understood, creating confusion and delays. Additionally, navigating the complex hierarchy of approval and authorization needed to gain access to resources can be time-consuming and frustrating.\\n\\nLastly, bureaucratic processes can limit the ability to quickly access necessary documentation for troubleshooting purposes, leading to additional costs and delays.\\n\\n## Lack of transparency - no estimations for work needed to be done\\n\\nThe team was struggling with a lack of transparency. They were not properly estimating project tasks, which led to delayed deliveries and a high number of tasks that were simply too big to be carried to completion. This resulted in extra-long delivery times and a lot of frustration for team members.\\n\\nThe team\'s lack of transparency was causing a lot of problems. They were not communicating effectively with each other or with their stakeholders, and as a result, they were not able to deliver projects on time. They were also not able to manage their workload effectively, which led to a lot of stress and burnout among team members.\\n\\nIn order to solve this problem, the team needed to start estimating project tasks more accurately. They also needed to start communicating more effectively with each other and with their stakeholders. This would help them better manage their workload and deliver projects on time.\\n\\nTo do this, the team decided to start using a project management tool that would help us estimate project tasks more accurately. We also decided to start holding regular team meetings to discuss progress and make sure everyone was on the same page.\\n\\n## Bringing more and more people to solve quality issues with quantity approach\\n\\nThe software development team was in trouble.  Despite being composed of skilled and experienced engineers, we were struggling to deliver projects on time and within budget. The root cause of this problem was a lack of effective and transparent processes.\\n\\nThe team had no clear guidelines for how to approach a project, and there was a lack of communication between team members. This resulted in confusion and delays, as team members were not sure what was expected of them. Additionally, there was a lack of accountability, as team members were not held responsible for their actions.\\n\\nIn an effort to fix this problem, the company decided to bring in more external people to the project. They believed that these new team members would bring fresh perspectives and new ideas to the table. However, this decision only made things worse.\\n\\nThe new team members had to spend a significant amount of time getting up to speed on the project. They had to learn about the company\'s processes, the existing codebase, and the project\'s requirements. This ramp-up time slowed down the project even more, as the new team members were not able to contribute to the project right away.\\n\\nThe team\'s lack of effective and transparent processes also made it difficult for the new team members to understand what was happening on the project. They were not sure who to go to for help, and they were not sure how to communicate with the rest of the team.\\n\\n## Enforce using immature in-house developed abstractions\\n\\n![In-house abstractions](./img5.png)\\n\\nIn-house abstractions are a common (anti)pattern\\n\\nWhen a large company enforces internal software development teams to use software abstractions that hide complexities of the Cloud configuration, or enforce using in-house unstable and low-quality shared libraries, it can have negative effects on the delivery time and product quality.\\n\\nThis can lead to delays in delivery and lower satisfaction among the development team. Additionally, the use of abstractions can make it more difficult for developers to understand and troubleshoot issues, leading to increased frustration and a decrease in productivity.\\n\\nFurthermore, using in-house shared libraries of low-quality can result in bugs and errors that can be difficult to fix, further delaying delivery and lowering product quality.\\n\\n## The actions we took to improve the situation\\n\\nAs you can see, there were a number of concerns that needed to be addressed. I then sat down with the rest of the team to discuss our current situation and our future course of action. How can we handle each of these concerns? The list of specific steps we took to advance the project is below.\\n\\n### Evolution instead of revolution\\n\\n![Evolution](./img6.png)\\n\\nPerforming a major transformation within the automotive industry can be a challenging task, but it is essential to plan for evolution rather than revolution. A compact approach that focuses on gradual changes will be more effective in achieving the desired outcome.\\n\\nWhen transforming a company, it\'s important to keep in mind that there may be resistance to changes from employees and stakeholders. This can be due to a lack of willingness to change the status quo or a fear of the unknown. It\'s crucial to address these concerns and work towards building a shared vision for the future.\\n\\nOne way to approach this is by involving employees and stakeholders in the planning process. This allows them to feel a sense of ownership and commitment to the changes that are being made. It\'s also important to communicate the benefits of the transformation clearly and consistently. This will help to build buy-in and support for the changes that are being made.\\n\\n### Using project management tooling: JIRA, Azure DEVOPS\\n\\n![What should we do](./img7.png)\\n\\nAt the very start, since there wasn\u2019t anything to kick the project off, we operated without any plan or organization. The product owner had a rough idea that needed to be worked on, and that was all there was.\\n\\nFirst, we organized the work in an iterative manner, by deciding to follow Scrum methodology. We decided to have two-week sprints. We still didn\u2019t have any tools at hand, so we started with a shared document. We wrote some task titles, and next to them, we wrote the names of developers who would like to tackle them. This was the way we did things in the first sprint.\\n\\nAfter a while, which was to be expected, such a rudimentary process became a bottleneck, so we decided that we should start using self-hosted Jira (provided by the client), which helped increase the transparency of what we do.\\n\\nThis has already helped tremendously. As this tool was self-hosted, it suffered stability issues, so we went for a similar tool, Azure DevOps, which has been very stable since then, and it\u2019s still being used on the project.\\n\\nWe experienced the following benefits by using these project management tools:\\n\\nImproved collaboration: These tools allow team members to work together more effectively, by providing a centralized location for project information and communication.\\n\\nIncreased visibility: With project management tooling, it is easier to keep track of project progress, identify issues, and make adjustments as needed. This can help teams to stay on schedule and deliver projects on time.\\n\\nBetter organization: Project management tooling can help teams to better organize tasks, assign responsibilities, and manage resources. This can improve efficiency and reduce the risk of errors.\\n\\nEnhanced reporting: These tools typically provide detailed reporting and analytics, which can be used to gain insights into project performance and make data-driven decisions.\\n\\nImproved communication: With project management tooling, it is easier to keep stakeholders informed about project progress and status. This can help to build trust and improve the working relationship between different teams and departments.\\n\\nStreamlined workflows: These tools can help to automate repetitive tasks and streamline workflows, making it easier to manage projects and free up team members to focus on more important work.\\n\\n### Using own AWS / Azure subscriptions, rather then a client-provided on premise solution\\n\\n![AWS & Azure](./img8.png)\\n\\nAt the start of the project, our team was offered that some other team at the client site manages our infrastructure for us. This was a on-premise solution. This, clearly, could sound reasonable - that someone else volunteers to take part of your problem on themselves - but this was something we didn\u2019t want to happen for a couple of reasons:\\n\\nMore often than not, in-house teams do not have such level of technical expertise compared to engineering force at Microsoft, Google, etc.\\n\\nIt\u2019s not a rare case that the documentation doesn\u2019t exist, or it\u2019s very poor\\n\\nMajor cloud vendors are faster with integrating tools, such as for instance Kubernetes, than the in-house teams.\\n\\nSolutions offered by in-house teams have been tested on a much smaller number of customers, so the quality of services offered is significantly lower then the ones provided by major cloud providers.\\n\\nWe went for the Azure cloud, which offers many advantages over an on-premise, self-managed solution. Most notably, the ability to scale quickly and elastically as your business needs change. With Azure, you can quickly deploy virtual machines and other services on demand with a few clicks of a button and only pay for what you use. Additionally, since all the infrastructure is managed in the cloud, you don\u2019t have to worry about server maintenance or patching of software updates which can eat up valuable time and resources. Finally, Microsoft provides a wide range of services that are tailored to meet any need, from big data analytics to content delivery networks, along with access to their global network of data centers, ensuring high availability for mission-critical workloads.\\n\\n### From nothing, via self-hosted GitLab to GitHub\\n\\n![GitLab vs GitHub](./img9.png)\\n\\nThe project kicked off with no place where our source-code could be stored. Our external DevOps consultant proposed that we start with self-hosting a GitLab instance. This allows us to have the flexibility of configuring it to fit our needs. We began using the system and were generally content with it, however, we encountered some occasional interruptions in service. This forced us to think about a more stable solution that could boost our productivity.\\n\\nAfter talking within our team, I came up with proposal to give GitHub and GitHub Actions a try. It became quickly evident that this was the best course of action to take.\\n\\nIt enabled us to collaborate on projects with team members located around the world. All code changes are tracked by Github, and it\'s easy to see exactly who changed what, when they made the change, and any comments that were left with the update. This helped ensure quality control is maintained at all times during development cycles. GitHub Actions helped our developers save time with repetitive tasks such as running tests or deploying builds.\\n\\n### Full automation with IaaC, terraform and GitHub Actions\\n\\n![IaaC](./img10.png)\\n\\nSome practices of our client, at the time I joined the project, were that the applications were quite often managed manually, which made us face the following challenges:\\n\\nReduced Visibility: As changes are made manually or using different tools, they can easily go unnoticed, which can cause unexpected issues or conflicts.\\n\\nManual Updates: Keeping systems up to date and maintaining a consistent configuration requires manual updates, which can be time consuming and prone to errors due to human error.\\n\\nSecurity Vulnerabilities: Without automation and version control that Infrastructure as Code provides, outdated software and configurations put the system at risk of security vulnerabilities that could allow malicious actors access to the system and data it stores or processes.\\n\\nPoor Scalability: When building systems without Infrastructure as Code, resources become more limited when you need them most - such as during times of increased user demand or when changing business needs demand a larger scale solution than you have currently in place.\\n\\nThe team went for Infrastructure as Code (IaaC), and the tool we used for it was Terraform, which helped us manage both of our clouds - the AWS one and the Azure one. We built pipelines that would validate any changes made to the infrastructure, and automatically deploy it to our environments using GitHub Actions, so we eliminated the need for someone to be in charge of doing this manually.\\n\\n## Conclusion\\n\\nAs a conclusion, this blog post urges you to use cutting-edge software engineering techniques in areas that are technically stale. As a result, businesses will advance, and engineering teams will be happy.\\n\\nIf you know someone who could benefit from or be inspired by this article, show your support by sharing it with them!"},{"id":"/2023/01/15/poc-and-mvp-what-is-the-difference","metadata":{"permalink":"/blog/2023/01/15/poc-and-mvp-what-is-the-difference","editUrl":"https://github.com/gran-software-solutions/blog/tree/main/blog/2023-01-15-poc-and-mvp-what-is-the-difference/index.mdx","source":"@site/blog/2023-01-15-poc-and-mvp-what-is-the-difference/index.mdx","title":"POC and MVP - What Is The Difference","description":"Example banner","date":"2023-01-15T00:00:00.000Z","formattedDate":"January 15, 2023","tags":[{"label":"business","permalink":"/blog/tags/business"}],"readingTime":4.27,"hasTruncateMarker":true,"authors":[{"name":"Greg Glazewski","title":"Senior engineer @ GRAN Software Solutions GmbH","url":"https://github.com/gglazewskigran","imageURL":"https://github.com/gglazewskigran.png","key":"gglazewskigran"}],"frontMatter":{"title":"POC and MVP - What Is The Difference","authors":"gglazewskigran","tags":["business"]},"prevItem":{"title":"Yes, companies in the automobile industry can (and should) undergo a digital transformation","permalink":"/blog/2023/01/17/automotive-industry-digitalization"},"nextItem":{"title":"3 Big Risks In Software Projects And How To Avoid Them","permalink":"/blog/2023/01/10/3-big-risks-in-software-projects-and-how-to-avoid-them"}},"content":"![Example banner](./img.png)\\n\\nPOC and MVP are two phrases that are widely used in the context of digital transformation a product development. What exactly do they mean? In the sentences that follow, we\'ll talk about it briefly.\\n\\n\x3c!--truncate--\x3e\\n\\n## What is POC?\\n\\nTo start off. Both are done at the early stages of software development (or product development in general). But they have very different goals.\\n\\nPOC (Proof-of-Concept) will prove (duh!) if the idea is technically feasible and useful enough. MVP (Minimum Viable Product) will minimise time and effort and let you see if there is a place in the market for your idea.\\n\\nA POC is a prototype or a minimal viable version of a product or service that is used to test and confirm whether an idea or concept is feasible. It serves primarily as an example of **how the concept is possible** and can be effectively implemented. A POC is often constructed with the very minimum set of features and functionalities necessary **to demonstrate the viability of the concept**.\\n\\n## What is MVP?\\n\\nAn MVP, on the other hand, is a product or service that provides the bare minimum of features and **functionalities required to satisfy early clients and collect feedback for further development**. An MVP, as opposed to a POC, is the final product or service that has been provided to a small number of clients for testing and feedback. With the intention of learning from client input and using that learning to iterate and improve the product, the MVP is created to be a minimum viable version of the product that **can be built and launched rapidly**.\\n\\n## So what is the difference between POC and MVP?\\n\\nIn conclusion, a POC is used to determine whether an **idea is possible**, and an MVP is a **completed product** or service that has the bare minimum of features necessary to be offered to clients. MVP is considered a step further than POC. As an example, your initial proof-of-concept for a lemon stand may be a simple setup consisting of a plastic table with a manual juicer placed in front of your garage. However, the minimum viable product (MVP) would be a fully operational, legally registered business that complies with hygiene regulations, operating out of a rented commercial space and using an electric juicer.\\n\\n## What is an example of a POC?\\n\\nImagine you discover an opportunity. You have connections with farmers who raise crickets, grasshoppers and mealworms. One day, you read about the growing popularity of edible insects in your city. You even meet someone who expresses interest in trying them but can\'t find a reliable source. This is an opportunity to build a business by connecting the dots between these two needs.\\n\\nThe first step would not be to create an online store with complex features like user registration, pictures of insects, ratings, vouchers, and loyalty programs. Instead, you would start by creating a simple spreadsheet to keep track of your insect farmers in one column, their stock in another column, and possibly prices in a third column. This would serve as your database. Then, you would open a new spreadsheet to store information about your clients, orders, and transactions. This would serve as your proof-of-concept.\\n\\nIf this process proves successful, and you are able to match customers with farmers, you have the beginnings of a business. The next step would be to create a minimum viable product (MVP).\\n\\n## What is an example of an MVP?\\n\\nBased on the results of your proof-of-concept, you now understand the minimum set of features required to meet the needs of your early customers.\\n\\nYour customers currently need to inquire about what is available before they place an order. Therefore, the MVP would be a website that displays up-to-date information about the insects currently available and a button to place orders.\\n\\nAt this stage, it is not necessary to implement a user database, secure management panel or a fraud detection system. Before expanding the feature set of your MVP, it is important to determine if each feature is a necessary addition or just a desirable one.\\n\\nAfter launching your MVP, you can gather feedback from customers and add additional features that enhance its appeal. For example, if users request the ability to view their order history, you can add a login feature that allows them to save their orders. If customers ask for a wishlist, you can add a wishlist feature.\\n\\n## Conclusion\\n\\nA proof-of-concept is a basic and not a long-term way to evaluate the feasibility of an idea. If it proves viable, you can then create a minimum viable product (MVP) to meet the needs of your customers. From there, you can gradually build and improve upon your MVP to create a full-fledged product. That\'s why it\'s important to make sure your MVP is scalable and sustainable from the start. This can be challenging, and it is often beneficial to seek the advice of experts.\\n\\nPlease let me know if you find this article useful and reach out to me if you have any questions about where to begin with your MVP."},{"id":"/2023/01/10/3-big-risks-in-software-projects-and-how-to-avoid-them","metadata":{"permalink":"/blog/2023/01/10/3-big-risks-in-software-projects-and-how-to-avoid-them","editUrl":"https://github.com/gran-software-solutions/blog/tree/main/blog/2023-01-10-3-big-risks-in-software-projects-and-how-to-avoid-them/index.mdx","source":"@site/blog/2023-01-10-3-big-risks-in-software-projects-and-how-to-avoid-them/index.mdx","title":"3 Big Risks In Software Projects And How To Avoid Them","description":"Example banner","date":"2023-01-10T00:00:00.000Z","formattedDate":"January 10, 2023","tags":[{"label":"business","permalink":"/blog/tags/business"}],"readingTime":6.375,"hasTruncateMarker":false,"authors":[{"name":"Greg Glazewski","title":"Senior engineer @ GRAN Software Solutions GmbH","url":"https://github.com/gglazewskigran","imageURL":"https://github.com/gglazewskigran.png","key":"gglazewskigran"}],"frontMatter":{"title":"3 Big Risks In Software Projects And How To Avoid Them","authors":"gglazewskigran","tags":["business"]},"prevItem":{"title":"POC and MVP - What Is The Difference","permalink":"/blog/2023/01/15/poc-and-mvp-what-is-the-difference"},"nextItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"}},"content":"![Example banner](./img.png)\\n\\nCommunication is the key. Do this right and your project will succeed. I will expose 3 big risks in software projects and tell you how to avoid them. Follow these suggestions and your chances will massively improve.\\n\\n## 1. Unclear Expectations\\n\\nUnclear expectations are dangerous. They can be very expensive at the least or disastrous at worst. Yet, they are not uncommon.\\nTeams spend hundreds of hours of effort to create a value that no one asked for. Unclear expectations can lead to lost money or jobs.\\n\\nUnclear expectations are normal, though. They will happen more often than not. And if they do, don\u2019t see them as mistakes, offense or\\nincompetence of yours or others. Everyone is unique, grew up in a different environment and was exposed to different experiences. All of\\nus think differently and see different things as \u201cobvious\u201d or \u201cself explanatory\u201d.\\n\\nMiscommunication will happen. And that is a good thing. Let it happen. It will expose imperfections in your communication process and\\nwill give you a chance to improve it. But it is very important to not ignore miscommunication. Unclear expectations are usually easy to\\nfix but require efforts on both sides: the stakeholder and the provider.\\n\\nTo avoid the risk of unclear expectations it is enough to come up with a proper SOP (Standard Operating Procedure) in the form of a checklist.\\n\\nAn example of the first checklist looks like this:\\n\\n* What outcome do I expect?\\n\\n* Will I be happy with anything less?\\n\\n* Why do I expect this particular outcome?\\n\\n* What constraints there are?\\n\\n* Ask what is possible.\\n\\nFollow this simple list and you will save yourself many headaches. Detailed explanation with examples comes in next paragraphs.\\n\\n### What outcome do I expect?\\n\\nWrite it down in a short, but very concrete sentence. It should take the form of a thing that already happened, not as an action to do.\\ne.g. \u201cbank transfer is enabled as a paying method for users in the eurozone\u201d not \u201cenable bank transfer for eurozone\u201d. This is sometimes\\ncalled an Acceptance Criteria. And if written properly, leaves no space for interpretation and allows you to test the outcomes (sometimes\\neven automatically).\\n\\nKeep in mind that it is natural for your expectations to change. We will talk about this in depth in the next couple of minutes.\\n\\n### Will I be happy with anything less?\\n\\nPrepare a simplified expectation. Usually you can solve 80% of the problem with 20% effort. Think about what could be stripped down from your expected outcome. Do you really need this in real-time or is it 4h late enough? Do you really need to sort and filter on every column or maybe just the date? This will prepare you to save the day (and time) once things get hairy during development.\\n\\n### Why do I expect this particular outcome?\\n\\nWrite down a sentence or two explaining why this outcome is wanted. This helps you to formalize and validate your expectations. Maybe you will learn something new or change perspective. On top of that, by setting your expectations in a context, you will help others see and understand the problem the way you see it. This reduces the chances of misunderstanding and even gives an opportunity to find alternative solutions to the problem. A good example would be \u201cOur customers demand a bank transfer as a payment method but our current payment provider allows this only for EUR currency\u201d. A bad example is \u201cwe need bank transfers as a payment method\u201d.\\n\\n### What constraints there are?\\n\\nGive yourself a minute or two and think about any limitations that apply to your expectations. Maybe you have an important customer onboarding scheduled and the feature must be implemented before this? Communicate this clearly! Every person responsible for delivery must know what constraints there are. Be it financial, technical or simply time constraints.\\n\\n### Ask what is possible\\n\\nEveryone\'s an expert in her domain. Everywhere else we make assumptions. Do not endanger your success. Ask experts if the expected outcome is possible given the constraints. And if not, ask for the simpler alternative you already prepared.\\n\\n## 2. Changing Requirements\\n\\nRequirements change. This is a simple fact. When you mature, your expectations change. Same goes for your features, products and business. Do not fall for the \u201cnever change a running system\u201d meme. Why is this a risk, though? Read on to figure out.\\n\\nWhen requirements change, the risk of Unclear Expectations arises. If requested changes were communicated verbally or somewhere on Slack and were accompanied by a vivid discussion, it won\u2019t be clear for the developers what to deliver. Even worse if there are multiple channels of communication in your organization: E-mails, multiple Slack channels, Jira tickets, Wiki documents.\\n\\nIt is imperative that you settle for a **Single Source Of Truth** and document everything in one place. Be it a ticket in your system or a Slack channel created explicitly for this issue. Keep all discussions formal and documented. This helps to track why decisions are made and what is the final verdict.\\n\\nDocument when things changed and why they changed. Date of change is very important. You can compare it with when was the last time software was released to see if your change is available. It is important information to reason about the problem with all stakeholders and developers. Equally important is the \u201cwhy\u201d. Not for blaming but to learn and improve the system. Like a black box on an airplane shows what went wrong before the crash, similarly a formal record of changes shows what could be improved if things go south.\\n\\nAs you see, communication is a challenge within a single team. But things change drastically if you depend on others. We will talk about this next.\\n\\n## 3. Dependency On Others\\n\\nYou can test, understand and rely on everything you control. Everything else is a risk. The more dependencies in your software project, the bigger the risk that someone will bring troubles. Planning and communicating in a single, standalone team is very difficult. Every extra team in the equation multiplies the efforts.\\n\\nDependencies take various forms. It could be a decision from one of the stakeholders or managers, internal service provided by other teams (think authentication or some kind of platform) or even a library your developers use. If something is not maintained by you or your team, it\'s a dependency and it can go wrong.\\n\\nThere is no silver bullet for dependencies. Organizations are complex systems and we all are meant to operate together. And this is good! Dependencies allow us to throw away some of the responsibilities and focus on producing real value. But you must prepare for the failures of others.\\n\\nMake a list of all your dependencies and answer following questions:\\n\\n* Do we really need this?\\n\\n* What is an alternative and what it costs?\\n\\n* What will happen if it disappears?\\n\\n* What will happen if it changes unexpectedly?\\n\\n* What will happen if we need it to change?\\n\\n* Who is my contact person for this particular dependency?\\n\\n## Conclusion\\n\\nIn this article we listed 3 big risks in software development and briefly explained how to avoid them. Software is hard and expensive. Oftentimes it is worth asking for a second opinion to avoid costly mistakes. I would like to ask you to share this article with anyone who deals with software (maybe on LinkedIn) and I invite you to contact me using the button below and tell me about your business problems. It is free and I\u2019m sure you will get massive value out of it."},{"id":"mdx-blog-post","metadata":{"permalink":"/blog/mdx-blog-post","editUrl":"https://github.com/gran-software-solutions/blog/tree/main/blog/2021-08-01-mdx-blog-post.mdx","source":"@site/blog/2021-08-01-mdx-blog-post.mdx","title":"MDX Blog Post","description":"Blog posts support Docusaurus Markdown features, such as MDX.","date":"2021-08-01T00:00:00.000Z","formattedDate":"August 1, 2021","tags":[{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.175,"hasTruncateMarker":false,"authors":[{"name":"Honey Malviya","title":"Senior engineer @ GRAN Software Solutions GmbH","url":"https://github.com/hmalviya","imageURL":"https://github.com/hmalviya.png","key":"honey-malviya"}],"frontMatter":{"slug":"mdx-blog-post","title":"MDX Blog Post","authors":"honey-malviya","tags":["docusaurus"]},"prevItem":{"title":"3 Big Risks In Software Projects And How To Avoid Them","permalink":"/blog/2023/01/10/3-big-risks-in-software-projects-and-how-to-avoid-them"},"nextItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\\n\\n:::tip\\n\\nUse the power of React to create interactive blog posts.\\n\\n```js\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n```\\n\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n\\n:::"},{"id":"long-blog-post","metadata":{"permalink":"/blog/long-blog-post","editUrl":"https://github.com/gran-software-solutions/blog/tree/main/blog/2019-05-29-long-blog-post.md","source":"@site/blog/2019-05-29-long-blog-post.md","title":"Long Blog Post","description":"This is the summary of a very long blog post,","date":"2019-05-29T00:00:00.000Z","formattedDate":"May 29, 2019","tags":[{"label":"hello","permalink":"/blog/tags/hello"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":2.05,"hasTruncateMarker":true,"authors":[{"name":"Greg Glazewski","title":"Senior engineer @ GRAN Software Solutions GmbH","url":"https://github.com/gglazewskigran","imageURL":"https://github.com/gglazewskigran.png","key":"gglazewskigran"}],"frontMatter":{"slug":"long-blog-post","title":"Long Blog Post","authors":"gglazewskigran","tags":["hello","docusaurus"]},"prevItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"},"nextItem":{"title":"First Blog Post","permalink":"/blog/first-blog-post"}},"content":"This is the summary of a very long blog post,\\n\\nUse a `\x3c!--` `truncate` `--\x3e` comment to limit blog post size in the list view.\\n\\n\x3c!--truncate--\x3e\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"},{"id":"first-blog-post","metadata":{"permalink":"/blog/first-blog-post","editUrl":"https://github.com/gran-software-solutions/blog/tree/main/blog/2019-05-28-first-blog-post.md","source":"@site/blog/2019-05-28-first-blog-post.md","title":"First Blog Post","description":"This is the first blog post on our site","date":"2019-05-28T00:00:00.000Z","formattedDate":"May 28, 2019","tags":[{"label":"hola","permalink":"/blog/tags/hola"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.12,"hasTruncateMarker":false,"authors":[{"name":"Dusan Odalovic","title":"Senior engineer @ GRAN Software Solutions GmbH","url":"https://github.com/dodalovicgran","imageURL":"https://github.com/dodalovicgran.png","key":"dodalovicgran"}],"frontMatter":{"slug":"first-blog-post","title":"First Blog Post","authors":"dodalovicgran","tags":["hola","docusaurus"],"description":"This is the first blog post on our site"},"prevItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"}]}')}}]);