"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4889],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},h=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,m=u["".concat(l,".").concat(d)]||u[d]||p[d]||s;return n?a.createElement(m,r(r({ref:t},h),{},{components:n})):a.createElement(m,r({ref:t},h))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:o,r[1]=i;for(var c=2;c<s;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7804:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const s={title:"25 Software Development Buzzwords Explained In Simple Terms",authors:"dodalovicgran",tags:["technology"],enableComments:!0},r=void 0,i={permalink:"/2023/01/11/25-software-development-buzzwords-in-simple-terms",editUrl:"https://github.com/gran-software-solutions/blog/tree/main/blog/2023-01-11-25-software-development-buzzwords-in-simple-terms/index.mdx",source:"@site/blog/2023-01-11-25-software-development-buzzwords-in-simple-terms/index.mdx",title:"25 Software Development Buzzwords Explained In Simple Terms",description:"You just started your software developer career and day-by-day you hear new terms, such as Docker, API, abstraction, etc. Your more experienced colleagues are handling that with ease, but you feel left out,",date:"2023-01-11T00:00:00.000Z",formattedDate:"January 11, 2023",tags:[{label:"technology",permalink:"/tags/technology"}],readingTime:20.14,hasTruncateMarker:!0,authors:[{name:"Dusan Odalovic",title:"Software Engineer @ GRAN Software Solutions GmbH",url:"https://github.com/dodalovicgran",imageURL:"https://github.com/dodalovicgran.png",key:"dodalovicgran"}],frontMatter:{title:"25 Software Development Buzzwords Explained In Simple Terms",authors:"dodalovicgran",tags:["technology"],enableComments:!0},prevItem:{title:"POC and MVP - What Is The Difference",permalink:"/2023/01/15/poc-and-mvp-what-is-the-difference"},nextItem:{title:"3 Big Risks In Software Projects And How To Avoid Them",permalink:"/2023/01/10/3-big-risks-in-software-projects-and-how-to-avoid-them"}},l={authorsImageUrls:[void 0]},c=[{value:"API",id:"api",level:2},{value:"Docker containers",id:"docker-containers",level:2},{value:"Version control / Git",id:"version-control--git",level:2},{value:"Open-Source",id:"open-source",level:2},{value:"Closed-source",id:"closed-source",level:3},{value:"Open-source",id:"open-source-1",level:3},{value:"Merge / Pull requests",id:"merge--pull-requests",level:2},{value:"Merge conflicts",id:"merge-conflicts",level:2},{value:"Synchronous / asynchronous execution",id:"synchronous--asynchronous-execution",level:2},{value:"Software versioning",id:"software-versioning",level:2},{value:"Logging",id:"logging",level:2},{value:"JSON",id:"json",level:2},{value:"Request / Response",id:"request--response",level:2},{value:"Scalability",id:"scalability",level:2},{value:"Abstraction",id:"abstraction",level:2},{value:"Upstream / downstream",id:"upstream--downstream",level:2},{value:"Database",id:"database",level:2},{value:"HTTP",id:"http",level:2},{value:"Rest API",id:"rest-api",level:2},{value:"IDE",id:"ide",level:2},{value:"Agile development",id:"agile-development",level:2},{value:"Testing",id:"testing",level:2},{value:"Manual",id:"manual",level:3},{value:"Automated",id:"automated",level:3},{value:"Debugging",id:"debugging",level:2},{value:"Compiling",id:"compiling",level:2},{value:"Client / Server",id:"client--server",level:2},{value:"Deployment",id:"deployment",level:2},{value:"Caching",id:"caching",level:2},{value:"Conclusion",id:"conclusion",level:2}],h={toc:c},u="wrapper";function p(e){let{components:t,...s}=e;return(0,o.kt)(u,(0,a.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You just started your software developer career and day-by-day you hear new terms, such as ",(0,o.kt)("strong",{parentName:"p"},"Docker"),", ",(0,o.kt)("strong",{parentName:"p"},"API"),", ",(0,o.kt)("strong",{parentName:"p"},"abstraction"),", etc. Your more experienced colleagues are handling that with ease, but you feel left out,\nconstantly running behind. Maybe even being embarrassed to ask. That\u2019s exactly what this blog post is about - we will give you concrete examples of some frequently used terms, presented in an easy-to-understand manner."),(0,o.kt)("p",null,"So, without further ado, let's get started with the examples."),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"API",src:n(5369).Z,width:"1641",height:"861"})),(0,o.kt)("p",null,"Building applications on top of existing APIs"),(0,o.kt)("p",null,"Stands for ",(0,o.kt)("strong",{parentName:"p"},"A"),"pplication ",(0,o.kt)("strong",{parentName:"p"},"P"),"rogramming ",(0,o.kt)("strong",{parentName:"p"},"I"),"nterface. Interface being a point where two systems, subjects, organizations, etc. meet and interact. API in simple terms means any kind of utility that can be\nconsumed by other applications."),(0,o.kt)("p",null,"You may come up with an idea to build an alternative UI for managing GitHub Pull Requests to the one provided by github.com. To achieve that, you can integrate with the pull requests API from GitHub, and present the\ndata coming from this API."),(0,o.kt)("p",null,"Another example may be building a command line utility, where you want to find the biggest file on your computer, where you need to interact with the File-system API to get this information."),(0,o.kt)("p",null,"Most of modern Web applications are designed so, that a Front-end application (say ReactJS) is connected to a backend API, to get or update / delete some data."),(0,o.kt)("h2",{id:"docker-containers"},"Docker containers"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Docker containers",src:n(9587).Z,width:"1953",height:"917"})),(0,o.kt)("p",null,"A technology which can be installed on any modern Operating System with a purpose of packaging your entire applications for easier usability."),(0,o.kt)("p",null,"In order to package your application as a Docker container, you need to supply a file describing how to install all the dependencies that your application has, as well as the command that\nneeds to be executed to get you application up and running."),(0,o.kt)("p",null,"Once this file (most often named ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile"),") is prepared, docker tool allows you to build an image of your application, which can be then pushed into many image registries out there\n(i.e. ",(0,o.kt)("a",{parentName:"p",href:"https://hub.docker.com/"},"https://hub.docker.com/"),", Amazon Container Registry, etc)"),(0,o.kt)("p",null,"After the image has been pushed to a registry of your choice, anyone that has an access to the image repository can run your application.\nWithout containerization technology, you would have to worry about all the challenges when installing and running software on many operating systems."),(0,o.kt)("h2",{id:"version-control--git"},"Version control / Git"),(0,o.kt)("p",null,"Version control refers to the ability to control the versions of the digital artifacts, whatever it may be (e-books, word docs, mp3 files...)."),(0,o.kt)("p",null,"In the software development sense, we're talking about the ability to manage versions of our software, as we change it."),(0,o.kt)("p",null,"Version control systems do not need to be exclusively used for code management: we can use it to version our images, word documents or any kind of digital artifact."),(0,o.kt)("p",null,"The advantage of versioning is the ability to track the progress of some software product, but also by versioning we have a chance to easily jump from version to version and that\nmay come handy in case we introduce a bug in version ",(0,o.kt)("inlineCode",{parentName:"p"},"1.4.2"),", but luckily we know that a version ",(0,o.kt)("inlineCode",{parentName:"p"},"1.4.1")," worked just fine."),(0,o.kt)("p",null,"Git is a cross-platform software which technically enables us to manage software changes, by creating new versions. Git is not the only technology that can be used for\nversioning your software, but has become kind of industry standard, due to it\u2019s flexibility, speed and it\u2019s distributed model."),(0,o.kt)("p",null,"Git as the software is what behind the scene powers services, such as GitHub."),(0,o.kt)("h2",{id:"open-source"},"Open-Source"),(0,o.kt)("p",null,"Every piece of software is based on some source-code that was written for it to be able to execute. There are 2 kinds of the source-code:"),(0,o.kt)("h3",{id:"closed-source"},"Closed-source"),(0,o.kt)("p",null,"Examples of these would be Windows Operating System code-base, MacOS one, etc. Closed-source is mostly developed by the companies which do not want to publish their source-code,\nbecause the code is their competitive advantage, and brings them financial income."),(0,o.kt)("h3",{id:"open-source-1"},"Open-source"),(0,o.kt)("p",null,"The opposite side, which promotes values of public visibility of the code, so that everyone can access and view it. An additional step is an ability for everyone to change the code.\nThis lead to the enormous popularity of public tools, such as GitHub, which provide an easy way for people to collaborate on software projects as well as to share code from each other."),(0,o.kt)("h2",{id:"merge--pull-requests"},"Merge / Pull requests"),(0,o.kt)("p",null,"Pull requests is a formal process of contributing to the existing code-base. It helps ensuring that any code change that needs to be made, gets verified by experienced engineers.\nThe process looks something like this:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"There is an existing software code-base"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"User A")," wants to extend existing functionality / fix existing bug"),(0,o.kt)("li",{parentName:"ul"},"(S)he ",(0,o.kt)("strong",{parentName:"li"},"prepares a bugfix or a feature")," on own development machine"),(0,o.kt)("li",{parentName:"ul"},"There is a ",(0,o.kt)("strong",{parentName:"li"},"User B")," who is considered a project maintainer (the one who knows the project well and ensures its quality)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"User A")," informs ",(0,o.kt)("strong",{parentName:"li"},"User B")," that (s)he wants the new feature/bugfix integrated integrated into existing code-base, which is a formal process (most often) performed using Web UIs provided\nby the source-code hosting platform, e.g Github, Gitlab, BitBucket, etc, where the code is hosted."),(0,o.kt)("li",{parentName:"ul"},"The pull request then usually goes through a ",(0,o.kt)("strong",{parentName:"li"},"series of improvements"),", until it\u2019s ready to be merged"),(0,o.kt)("li",{parentName:"ul"},"After being merged, the new feature or bugfix is successfully integrated into the code-base")),(0,o.kt)("h2",{id:"merge-conflicts"},"Merge conflicts"),(0,o.kt)("p",null,"Working in a collaborative environment sometimes lead to a situation when two team members want to change the same line(s) of code, for different reasons. Let\u2019s illustrate the problem"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Merge conflicts",src:n(6509).Z,width:"1290",height:"656"})),(0,o.kt)("p",null,"Merge conflicts happen in the situation where there\u2019s an existing code base (Nameprinter.kt in this example), and there are two developers, which ",(0,o.kt)("strong",{parentName:"p"},"want to update the same line(s) of code"),".\nIn the case from the image above we have a name variable defined, in the current file version, and we have two attempts to change it: the one to make it hold \u201dMerry\u201d and the other one to hold \u201dJack\u201d value."),(0,o.kt)("p",null,"So, the two developers happily commit code in their local repositories,  and want to push their code to the main branch, which contains tested and stable code.\nThe first developer that wants to merge her changes into the main branch will have no issues with this at all. Let\u2019s say that ",(0,o.kt)("inlineCode",{parentName:"p"},'val name = "Merry"')," is what we now have in the main branch.\nBut, what happens when the second developer wants to push her change to the repo? Well, let\u2019s say we\u2019re using Git Version Control. With an attempt to push the change from the second developer, Git will report that the second developer is running slightly behind the server, and that the changes on the server need to be pulled locally, and then the second developer can push to code to the main branch."),(0,o.kt)("p",null,"At this moment the ",(0,o.kt)("strong",{parentName:"p"},"merge conflict")," will occur, giving a clear signal to the second developer that she ",(0,o.kt)("strong",{parentName:"p"},"needs to decide")," what should be the content of the problematic line. The second developer ",(0,o.kt)("strong",{parentName:"p"},"most often"),"\nneeds to discuss with the person that contributed to the conflicting line, to find the adequate solution. Once there\u2019s a solution agreed upon, the second developer can ",(0,o.kt)("strong",{parentName:"p"},"resolve the merge conflict")," and push her\nchanges to the central repository."),(0,o.kt)("h2",{id:"synchronous--asynchronous-execution"},"Synchronous / asynchronous execution"),(0,o.kt)("p",null,"Synchronous might be more easily understood if we use term blocking instead. Some things need to be synchronous/blocking by their nature. Imagine you have a sample code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"function completeCheckout() {\n    storeOrderInDb(); // takes 2s\n    transferToOrderManagementSystem(); // takes 3s\n    sendConfirmationMail(); // takes 3s\n}\n")),(0,o.kt)("p",null,"Ideally, we should not design our systems to be synchronous / blocking. If, in the example from above, we decide that all 3 functions ",(0,o.kt)("inlineCode",{parentName:"p"},"storeOrderInDb"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"transferToOrderManagementSystem")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"sendConfirmationMail"),"\nare synchronous, than user will have to wait 8 seconds in total until he gets a response from the server."),(0,o.kt)("p",null,"If you, instead, decide that only the first method, storeOrderInDb is synchronous, and other 2 aren't, that means that user will have to wait only 2 seconds, until his order is successfully stored in the database,\nand his order will eventually be sent to order management system and he will get a confirmation e-mail (this can wait a bit, and the user doesn't need to get this done immediately)."),(0,o.kt)("p",null,"A good rule of thumb would be that we should design for asynchronous, and the user should not be blocked unless there is a valid reason to do it."),(0,o.kt)("h2",{id:"software-versioning"},"Software versioning"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Software versioning",src:n(2505).Z,width:"1500",height:"1112"})),(0,o.kt)("p",null,"Software evolves over time."),(0,o.kt)("p",null,"It gets bugs fixed and new features added, as well. It can be that, for whatever reason, some user wants to use the first version of our application, two years old, whereas some other user wants to use the latest one.\nWe need a way to store our updated software alongside its version somehow."),(0,o.kt)("p",null,"There are a couple of versioning schemas, ",(0,o.kt)("u",null,(0,o.kt)("a",{parentName:"p",href:"https://semver.org/"},"Semantic versioning"))," being one of them with high adoption."),(0,o.kt)("p",null,"One additional reason to have versioning schema in place is an easier way to roll back some software that contains a bug for example, to a previous, known to work version. So, if we have rolled application version\n",(0,o.kt)("inlineCode",{parentName:"p"},"1.2.3"),", and we want to roll it back, we could simply, from our software registry pull the version ",(0,o.kt)("inlineCode",{parentName:"p"},"1.2.2")," and roll it out to the customers."),(0,o.kt)("h2",{id:"logging"},"Logging"),(0,o.kt)("p",null,"When developing our applications (mostly backend systems), it's very important that during the application runtime execution we preserve some sort of messages containing important information about a system or user behavior."),(0,o.kt)("p",null,"An example would be that if a user enters 3 times wrong login credentials we store this message so that we can troubleshoot/diagnose given use-case. The recommended way of doing it would be writing these messages to the\nstandard out (console), which can later be searched through when needed."),(0,o.kt)("p",null,'Another case would be that in case our code talks to the database, and there\'s a connectivity issue, we could store the message, something along the lines: "There was a connection timeout connecting to the database x.y.z".'),(0,o.kt)("p",null,"Often, these logging libraries contain various logging levels, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"DEBUG"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"INFO"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"FATAL")," which help us set the importance of the things we are logging: we can then, for instance, filter logs which are considered\n",(0,o.kt)("inlineCode",{parentName:"p"},"FATAL")," and then do the analysis and the troubleshooting."),(0,o.kt)("p",null,"Often you want to enable ",(0,o.kt)("inlineCode",{parentName:"p"},"DEBUG")," level logging on your dev environment, so that you can additionally assert if everything runs as expected, and use ",(0,o.kt)("inlineCode",{parentName:"p"},"WARN"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"FATAL")," level on your production, to avoid noise, and see only\nissues in the runtime."),(0,o.kt)("h2",{id:"json"},"JSON"),(0,o.kt)("p",null,"JSON is a human-readable and a portable data serialization format . It's famous for being used for a data interchange between browsers and servers, but not exclusive to that."),(0,o.kt)("p",null,"An example of JSON serialized (formatted) data would be:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"JSON",src:n(4854).Z,width:"1500",height:"1088"})),(0,o.kt)("p",null,"JSON provides a couple of data types, such as strings, numbers, objects, arrays, and all of them together are enough to express any sort of data, which is one of the reasons\nwhy it's heavily used (apart from human readability)."),(0,o.kt)("h2",{id:"request--response"},"Request / Response"),(0,o.kt)("p",null,"Very popular interaction model between two (software) parties, where one side (client) initiates the communication by sending ",(0,o.kt)("strong",{parentName:"p"},"a request")," to the other party (server) which upon\nunderstanding and processing the request sends ",(0,o.kt)("strong",{parentName:"p"},"a response")," back to the client. Very often you\u2019ll hear HTTP Request / HTTP Response which is a specialized case where such\ncommunication going over the network, using HTTP protocol."),(0,o.kt)("h2",{id:"scalability"},"Scalability"),(0,o.kt)("p",null,"A frequently used term is software scalability, which is an ability of the software to cope with the ever-increasing load, often as consequence of an increased number of users using\nthe software at the same time. Applications should be designed in such a way to be able to handle the increased load in a reasonable manner, by responding to the user in as short\namount of time as possible, or, when not possible, informing the user that the system is experiencing high load, and that the requests can\u2019t be fulfilled."),(0,o.kt)("h2",{id:"abstraction"},"Abstraction"),(0,o.kt)("p",null,"You will very frequently come across this term, as you progress in your career. Abstraction is a fancy name for hiding some complexity under some name. What does that mean?"),(0,o.kt)("p",null,"Suppose we have a function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"const getUserDetails = (userId) => {\nconst baseUserData = await http.get(\"https://api.users.com/users/${userId}\")\n    .header('Accept', 'application/json')\n    .header('X-API-KEY', 'xxxx-yyyy')\n    .call();\nconst dbRow = dbClient.connect('my-database').executeQuery(\n    \"select * from users where user_id = ${userId}\").first();\n    return {\n        ...baseUserData,\n        ...dbRow\n    };\n}\n")),(0,o.kt)("p",null,"This method, as you may guess by being patient enough to read it entirely combines user data originating from two datasources: HTTP API and a database. This imposes non-trivial cognitive load\non the reader, which we may reduce by introducing abstractions named ",(0,o.kt)("inlineCode",{parentName:"p"},"getDatabaseDetails")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"getBaseUserData")," :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const getUserDetails = (userId) => {\n    const baseUserData = getBaseUserData(userId);\n    const dbRow = getDatabaseDetails(userId)\n    return {...baseUserData, ...dbRow};\n}\n\nconst getBaseUserData = (userId) => {\n    const baseUserData = await http.get(\"https://api.users.com/users/${userId}\")\n        .header('Accept', 'application/json')\n        .header('X-API-KEY', 'xxxx-yyyy')\n        .call();\n}\n\nconst getDatabaseDetails = (userId) => {\n    dbClient.connect('my-database', 'my-username', 'my-password').executeQuery(\n        \"select * from users where user_id = ${userId}\"\n    ).first();\n}\n")),(0,o.kt)("p",null,"Here, we reduced the cognitive load to the user by hiding all the lower-level details under two abstractions ",(0,o.kt)("inlineCode",{parentName:"p"},"getBaseUserData")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"getDatabaseDetails"),". The immediate advantage is that getting to know what ",(0,o.kt)("inlineCode",{parentName:"p"},"getUserDetails"),"\nfunction does is no longer such a complex task. Another advantage is that two newly created abstractions can even be reused in some other place in our applications where this behavior is needed."),(0,o.kt)("p",null,"This is just a short intro to abstractions, which is something you will likely master throughout your career."),(0,o.kt)("h2",{id:"upstream--downstream"},"Upstream / downstream"),(0,o.kt)("p",null,"You will hear these two terms relatively often: ",(0,o.kt)("strong",{parentName:"p"},"upstream server - downstream server"),"."),(0,o.kt)("p",null,"Or ",(0,o.kt)("strong",{parentName:"p"},"upstream job - downstream job"),"."),(0,o.kt)("p",null,"I was having difficulties with this one until I came across the article that simplified this one for me:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Upstream is a ",(0,o.kt)("strong",{parentName:"p"},"message sender"),". Downstream is a ",(0,o.kt)("strong",{parentName:"p"},"message receiver"))),(0,o.kt)("p",null,"Imagine you have an HTTP client and an HTTP server."),(0,o.kt)("p",null,"HTTP client issues a request to a server to save some user data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-http"},'POST /user\nHost: myserver.com\nContent-Type: application/json\n\n{\n"name": "john",\n"age": 33\n}\n')),(0,o.kt)("p",null,"Looking from the perspective of the HTTP request, ",(0,o.kt)("strong",{parentName:"p"},"the client")," is an ",(0,o.kt)("strong",{parentName:"p"},"upstream component"),", being a message sender, and ",(0,o.kt)("strong",{parentName:"p"},"the server")," is a ",(0,o.kt)("strong",{parentName:"p"},"downstream")," component,\nbeing a message receiver."),(0,o.kt)("p",null,"Upon user being saved successfully, ",(0,o.kt)("strong",{parentName:"p"},"http server")," replies:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-http"},'200 OK\n\n{\n"userId": 222\n}\n')),(0,o.kt)("p",null,"From the perspective of the the HTTP response, now the ",(0,o.kt)("strong",{parentName:"p"},"http server")," is an ",(0,o.kt)("strong",{parentName:"p"},"upstream")," component, being a message sender, and ",(0,o.kt)("strong",{parentName:"p"},"http client")," is a ",(0,o.kt)("strong",{parentName:"p"},"downstream")," component, being a message receiver."),(0,o.kt)("p",null,"Hope that additional illustration below makes things clearer."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Upstream / Downstream",src:n(6643).Z,width:"1500",height:"650"})),(0,o.kt)("h2",{id:"database"},"Database"),(0,o.kt)("p",null,"We use databases when we want to have some long term accessible data. There are many database solutions out there, optimized for particular use-cases."),(0,o.kt)("p",null,"Databases ensure that the data we put there stays there as long as they are needed. Often, these databases ensure that the data persisted is also backed up, to ensure there's no data loss."),(0,o.kt)("p",null,"Apart from the ability to store the data, the databases provide a way to query the data and access it."),(0,o.kt)("p",null,"Two very popular types of databases nowadays are relational and document databases. The have different use-cases when one should use them, and some examples of concrete technologies implementing these types are PostgreSQL on a relational side, or MongoDB on the relation side."),(0,o.kt)("p",null,"Associated with databases is the so-called CRUD acronym. It refers to Create, Read, Update and Delete, that are the actions we can perform over database entries."),(0,o.kt)("h2",{id:"http"},"HTTP"),(0,o.kt)("p",null,"Means for reliable exchange of text-based, human and machine-readable content between different applications."),(0,o.kt)("p",null,"The core of HTTP communication is the client/server and request/response pairs. The communication goes like:"),(0,o.kt)("p",null,"HTTP client application (say, your browser) sends a HTTP Request to a remote HTTP server"),(0,o.kt)("p",null,"HTTP Server receives the request, and responds with a HTTP response, which then client handles in some way."),(0,o.kt)("p",null,"An example of the HTTP communication would be the one between a browser and a server needed to fetch resources for rendering web page: html documents, css styles, JavaScrtipt scripts, Ajax requests, etc."),(0,o.kt)("p",null,"HTTP contains a server host name, request and response headers, depending on use-case request and / or response body, cookies etc."),(0,o.kt)("p",null,"HTTP supports the concept of verbs, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"GET"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"POST"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"DELETE")," which provides a way to express more clearly what do try to do with the remote resource, like getting some resource, deleting it, and so on."),(0,o.kt)("h2",{id:"rest-api"},"Rest API"),(0,o.kt)("p",null,"Rest API is layer sitting on top of aforementioned HTTP protocol, and is based on the concept of resources."),(0,o.kt)("p",null,"Rest API, like any other API, is used to build applications by integrating with them. In this case, integration is done using an HTTP client."),(0,o.kt)("p",null,"Many popular platforms today, like Facebook, Twitter or Github provide their APIs, which they use themselves (e.g. Facebook website or their Android and IOS mobile applications are consuming Facebook API itself), but also to be consumed by the others (above some limit you get charged for it)."),(0,o.kt)("p",null,"As mentioned, resources are a central concept in the Rest API world. One resource can be (let's use Github API as an example) a repository, and Github API states that we can manage particular repository via their APIs, by accessing particular URLs and sending correct input data using proper HTTP verbs."),(0,o.kt)("p",null,"Apart from Rest APIs, there are also emerging GraphQL APIs, which are also sitting on top of HTTP protocols but differ in philosophy of how the data should be accessed and managed."),(0,o.kt)("h2",{id:"ide"},"IDE"),(0,o.kt)("p",null,"Stands for Integrated Development Environment, which is a piece of software used to develop applications. Some popular ones: Visual studio code, IntelliJ IDEA, etc."),(0,o.kt)("p",null,"IDEs differ from classical text editors by offering way richer set of refactorings, and way deeper awareness of the frameworks and programming languages. That way they help you write better code."),(0,o.kt)("h2",{id:"agile-development"},"Agile development"),(0,o.kt)("p",null,"Agile development refers to the way the work is organized nowadays when developing software. This is more like general idea, and there are couple of concrete methodologies adhering to these principles, such as: Scrum, Kanban, etc."),(0,o.kt)("p",null,"The idea is that software should be changed frequently, in small increments, so that each increment can be validated by the user as soon as possible."),(0,o.kt)("p",null,"By being able to frequently release smaller software increments, we can get the feedback from the users, but also we are able to more easily recover from the bugs we may have introduced (since the scope of small changes allows for easier troubleshooting)."),(0,o.kt)("p",null,"You may also hear about tools such as Jira, Azure DevOps or ClickUp, which help simplifying your software development flow."),(0,o.kt)("h2",{id:"testing"},"Testing"),(0,o.kt)("p",null,"Testing is the formal process of asserting software quality. Ideally, we want to test the things ourselves, before we hand our software to our customers. In general, we have two types of tests:"),(0,o.kt)("h3",{id:"manual"},"Manual"),(0,o.kt)("p",null,"Manual testing involves 1 or more people testing applications by hand, by interacting with, for instance, a mobile application, or browser-based websites, by going through a series of scenarios (use-cases) and asserting that what was expected happened. This testing category is very expensive, and error-prone on top (anything involving people is risky), so it should be minimized."),(0,o.kt)("h3",{id:"automated"},"Automated"),(0,o.kt)("p",null,"This group of tests should be the desired way to test the software before releasing it. The idea is to write a set of tests that can be executed by machines, thus they will be much faster and less risky than when performed by people."),(0,o.kt)("p",null,"One test, implemented in some programming language (let's say Python), interacts with our software, gets the results of that interaction, and asserts that results match expectations of such an interaction."),(0,o.kt)("p",null,"These automated tests can further be divided in ",(0,o.kt)("strong",{parentName:"p"},"unit tests"),", ",(0,o.kt)("strong",{parentName:"p"},"integration tests")," (there's no consensus on what types of tests should exist and how should they be named at the time being)"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"One important thing to note is that testing reveals presence of bugs, not their absence. The fact that your tests are green most likely conveys the message that you didn\u2019t test enough")),(0,o.kt)("h2",{id:"debugging"},"Debugging"),(0,o.kt)("p",null,"Debugging is most often used in those cases when we want to troubleshoot some issues we have with our application. Technically speaking, debugging is a mode in which we can start the application so that we can inspect its behavior during the execution. There is also a concept of breakpoints, which are the points in code (concrete lines in source files) where we would like to pause application execution."),(0,o.kt)("p",null,"How it works:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set a breakpoint in a source file's concrete line you'd like to pause your application's execution")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Trigger an application flow that would cause the line you set to be executed")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When the execution reaches your line, it will pause there, giving you control to:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"resume it")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"inspect all the variables (global, local)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"continue debugging line by line")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"step into functions..."))))),(0,o.kt)("p",null,"This is mostly used by developers on their machines, but sometimes it's also possible to debug processes running on remote machines."),(0,o.kt)("h2",{id:"compiling"},"Compiling"),(0,o.kt)("p",null,"There are programming languages, such as JavaScript for instance, where a JavaScript engine can directly execute the lines of code you wrote. This is for instance your browser, or a NodeJS."),(0,o.kt)("p",null,"On the other hand, many programming languages (such as Java or C#) require us to create an intermediary representation of code, which is both required and optimized for the runtime and is the representation that is required to run the applications written in these languages."),(0,o.kt)("p",null,"For instance, in case of Java programming language, we need to transform Java source code files into Java bytecode files. These are later used to run our application using Java runtime environment."),(0,o.kt)("p",null,"Pre-compiled code representations tend to be highly optimized for the platform which executes the code, leading to greater security and performance."),(0,o.kt)("h2",{id:"client--server"},"Client / Server"),(0,o.kt)("p",null,"This is one interaction model (out of a few ones) between the two software parties (processes) where:"),(0,o.kt)("p",null,"client is a party which ",(0,o.kt)("strong",{parentName:"p"},"initiates communication")," with the server"),(0,o.kt)("p",null,"server is the party which ",(0,o.kt)("strong",{parentName:"p"},"responds to the requests")," sent by the client"),(0,o.kt)("p",null,"This interaction model you can find, for instance, in web browsers, where the client (the browser itself) requests web resources from the web-server (which is server in this case)"),(0,o.kt)("p",null,"Servers never initiate this interaction."),(0,o.kt)("h2",{id:"deployment"},"Deployment"),(0,o.kt)("p",null,"Deployment is a process of installing your software on a server, making it available for end-users. Deployment frequency and duration can vary significantly between different applications, depending on software complexity, a technical debt of the applications, deployment tooling efficiency, etc."),(0,o.kt)("p",null,"There are companies which are deploying their software several times a day, whereas some companies deploy very rarely, once in a month, or even less often."),(0,o.kt)("p",null,"The deployment should, ideally, be an automated process, consisting of various testing phases, packaging and versioning software release, installing it on a server, and performing some health checks to ensure the success of the deployment"),(0,o.kt)("h2",{id:"caching"},"Caching"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Caching",src:n(7287).Z,width:"1903",height:"824"})),(0,o.kt)("p",null,"Caching is a process of remembering values of some time-taking or resource expensive computations so that they can be reused for the subsequent, identical calls."),(0,o.kt)("p",null,"In some systems, querying a database is a very expensive operation time-wise, and we might want to cache some results that can be cached."),(0,o.kt)("p",null,"For instance, imagine we have an e-commerce platform, and we want to present categories to the users, which are coming from a database. These categories are not changing so frequently, so we might want to protect our database server being querying each time each page is displayed for each user by caching these results once they are returned from the database the first time."),(0,o.kt)("p",null,"We often store this cached value in server memory, or we can put this information to the external tools, such as Redis or similar, which have much better read performance than the databases."),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"It's not easy to start a career as a software engineer. We simply need to be familiar with too many concepts. In this post, we've covered a few of the most popular ones in a way that will give you enough background information to participate in conversations with your more experienced coworkers."),(0,o.kt)("p",null,"Do you want any further software development jargon that I missed to be defined as well? Please let me know by clicking the button below."),(0,o.kt)("p",null,"Please forward this link to any friends or coworkers who might find it useful."))}p.isMDXComponent=!0},5369:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img1-31b0a31097d31e4982e1d58754851325.png"},9587:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img2-36b1387b09ba2c3ea3033c3265275e01.png"},6509:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img3-fccbc617caa1b04a7521e38479e71f93.png"},2505:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img4-ce454a7de5e62a4143116b0975e341b9.png"},4854:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img5-970374c5daca50ca548e071b46551d9a.png"},6643:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img6-96fc60802497d3314fd1b38359fb0c74.png"},7287:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img7-d5daf929f0b827b147f1401ea6b88f27.png"}}]);